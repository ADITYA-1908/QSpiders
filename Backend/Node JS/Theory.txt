1) what is Node.js
Node.js is an open-source, cross-platform JavaScript runtime 
environment that allows developers to run JavaScript outside 
of the browser, typically on the server side.
It uses the V8 JavaScript engine (the same engine used by Google
Chrome) and is built to develop scalable network applications 
such as web servers, REST APIs, real-time apps, and more.

2)Key features of Node.js
Asynchronous & Event-Driven
Cross-Platform
Low buffering 
Real-Time Capabilities
Uses JavaScript Everywhere
support NPM (Node Package Manager)

3)History of Node.js
Node.js invented in 2009 by Ryan dhal
it is mainted by Openjs foundation
Major application and platform using node.js paypal,linkedin,NASA.
current vesrion on node is V24 stable and current version is V22.
for production deployment use LTS(Long term Support)


4) require:- it is used to import module in my current file in common js moule

5) what are the diffrence between common js and ES module?
CommonJS vs ES Module
CommonJS:
-CJS is a  module system used in node.js for organizing  code into reusebility.
    it allows you to import and export functionalities like function objects or 
    varibale between diffrent files.

-const x = require(<FilePath>)
-module.exports= value
- Uses `require` to import modules and `module.exports` to export them.
- Synchronous loading of modules.
- Primarily used in Node.js.
- Supports dynamic loading of modules.
- Example: `const module = require('module');`       
- Exports can be a single object or multiple named exports.
ES Module:
-import x from <filepath>
export value /export default value
- Uses `import` to import modules and `export` to export them.
- Asynchronous loading of modules.
- Can be used in both Node.js and browser environments.
- Supports static analysis and tree shaking.
- Example: `import { name } from './module.js';`

 6) Advantages of Node.js
 -Fast Execution
 -Scalability
 -Non Blocking I/O (Asynchronous)
followed by Event-Driven Architecture handle multiple requests.
 -Single Programming Language (JavaScript) side by side for both client and server.  makes it easier for developers to work on both ends.
 -Large Ecosystem (npm) access millions of libraries and modules.
 -Scalability- support microservices architecture, allowing applications to be built as a collection of small, independent services that can be developed, deployed, and scaled independently.
 -Community Support

 7) Disadvantages of Node.js
 -Single Threaded: Node.js runs on a single thread, which can be a limitation for CPU-intensive tasks.
 -not suitable for CPU-intensive tasks: Node.js is designed for I/O-bound tasks and may not perform well with CPU-intensive operations.
 -Callback Hell: Asynchronous nature can lead to complex nested callbacks, making code harder to read and maintain.
 - lack of  strong typeing
 -Learning Curve: Developers familiar with synchronous programming may find the asynchronous model of Node.js challenging to grasp initially.

8) modules;- set of reusable code 
  8.1)Core Module
    -http
    -https
    -files
    -OS
    -Path 
    -Url
    -Event
  8.2) custom module
  8.3) Third party Module
